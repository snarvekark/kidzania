{"ast":null,"code":"var _jsxFileName = \"D:\\\\281\\\\Project2\\\\kidzania\\\\client\\\\src\\\\components\\\\upload.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport S3FileUpload from 'react-s3'; //import Putdata from './Putdata.js';\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = ev => {\n      this.setState({\n        success: false,\n        url: \"\"\n      });\n    };\n\n    this.handleUpload = ev => {\n      let file = this.uploadInput.files[0]; // Split the filename to get the name and type\n\n      let fileParts = this.uploadInput.files[0].name.split('.');\n      let fileName = fileParts[0];\n      let fileType = fileParts[1];\n      console.log(\"Preparing the upload\");\n      console.log(fileParts);\n      axios.post(\"http://localhost:3001/s3sign\", {\n        fileName: fileName,\n        fileType: fileType\n      }).then(response => {\n        var returnData = response.data.data.returnData;\n        console.log('Return Data : ' + returnData);\n        var signedRequest = returnData.signedRequest;\n        console.log('Signed Request : ' + signedRequest);\n        var url = returnData.url;\n        this.setState({\n          url: url\n        });\n        console.log(\"Request \" + signedRequest); // Put the fileType in the headers for the upload\n\n        var options = {\n          headers: {\n            'Content-Type': fileType\n          }\n        };\n        axios.put(signedRequest, file, options).then(result => {\n          console.log(\"Response from s3\");\n          this.setState({\n            success: true\n          });\n        }).catch(error => {\n          alert(\"ERROR \" + JSON.stringify(error));\n        });\n      }).catch(error => {\n        alert(JSON.stringify(error));\n      });\n    };\n\n    this.state = {\n      success: false,\n      url: \"\"\n    };\n  }\n\n  render() {\n    const Success_message = () => React.createElement(\"div\", {\n      style: {\n        padding: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        color: 'green'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"File Uploaded\"), React.createElement(\"a\", {\n      href: this.state.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Click the link to access the file\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"DELETE\"));\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Upload your file\"), this.state.success ? React.createElement(Success_message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) : null, React.createElement(\"input\", {\n      onChange: this.handleChange,\n      ref: ref => {\n        this.uploadInput = ref;\n      },\n      type: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"UPLOAD\")));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["D:/281/Project2/kidzania/client/src/components/upload.js"],"names":["React","Component","axios","S3FileUpload","Upload","constructor","props","handleChange","ev","setState","success","url","handleUpload","file","uploadInput","files","fileParts","name","split","fileName","fileType","console","log","post","then","response","returnData","data","signedRequest","options","headers","put","result","catch","error","alert","JSON","stringify","state","render","Success_message","padding","color","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport S3FileUpload from 'react-s3';\r\n//import Putdata from './Putdata.js';\r\n\r\nclass Upload extends Component {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      success : false,\r\n      url : \"\"\r\n    }\r\n  }\r\n\r\n handleChange = (ev) => {\r\n    this.setState({success: false, url : \"\"});\r\n    \r\n  }  // Perform the upload\r\n  handleUpload = (ev) => {\r\n    let file = this.uploadInput.files[0];\r\n    // Split the filename to get the name and type\r\n    let fileParts = this.uploadInput.files[0].name.split('.');\r\n    let fileName = fileParts[0];\r\n    let fileType = fileParts[1];\r\n    console.log(\"Preparing the upload\");\r\n    console.log(fileParts);\r\n    axios.post(\"http://localhost:3001/s3sign\",{\r\n      fileName : fileName,\r\n      fileType : fileType\r\n    })\r\n    .then(response => {\r\n      var returnData = response.data.data.returnData;\r\n      console.log('Return Data : ' + returnData);\r\n      var signedRequest = returnData.signedRequest;\r\n      console.log('Signed Request : ' + signedRequest);\r\n      var url = returnData.url;\r\n      this.setState({url: url})\r\n      console.log(\"Request \" + signedRequest);\r\n           // Put the fileType in the headers for the upload\r\n      var options = {\r\n        headers: {\r\n          'Content-Type': fileType\r\n        }\r\n      };\r\n      axios.put(signedRequest,file,options)\r\n      .then(result => {\r\n        console.log(\"Response from s3\")\r\n        this.setState({success: true});\r\n      })\r\n      .catch(error => {\r\n        alert(\"ERROR \" + JSON.stringify(error));\r\n      })\r\n    })\r\n    .catch(error => {\r\n      alert(JSON.stringify(error));\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const Success_message = () => (\r\n      <div style={{padding:50}}>\r\n        <h3 style={{color: 'green'}}>File Uploaded</h3>\r\n        <a href={this.state.url}>Click the link to access the file</a> \r\n        <br/>\r\n        <button onClick=\"#\">DELETE</button>\r\n      </div>\r\n    )\r\n    return (\r\n      <div className=\"App\">\r\n        <center>\r\n          <h1>Upload your file</h1>\r\n          {this.state.success ? <Success_message/> : null}\r\n          <input onChange={this.handleChange} ref={(ref) => { this.uploadInput = ref; }} type=\"file\"/>\r\n          <br/>\r\n          <button onClick={this.handleUpload}>UPLOAD</button>\r\n        </center>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;"]},"metadata":{},"sourceType":"module"}